
SPImaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a3  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000148  00000000  00000000  00000381  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ca  00000000  00000000  000004c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ae  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d4  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__vector_1>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	52 c0       	rjmp	.+164    	; 0xf2 <__vector_19>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	17 d0       	rcall	.+46     	; 0xc8 <main>
  9a:	3d c0       	rjmp	.+122    	; 0x116 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <init_master>:
#define F_CPU = 16000000

void init_master(void)
{
	// SCK=f/16
	SPCR = (1<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(1<<SPR0);
  9e:	81 ed       	ldi	r24, 0xD1	; 209
  a0:	8c bd       	out	0x2c, r24	; 44
	SPSR = (0<<SPI2X);
  a2:	1d bc       	out	0x2d, r1	; 45
	DDRB = (1<<DDB7)|(1<<DDB5)|(1<<DDB4);
  a4:	80 eb       	ldi	r24, 0xB0	; 176
  a6:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PORTB4); // Pulling SS2 high
  a8:	80 e1       	ldi	r24, 0x10	; 16
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	08 95       	ret

000000ae <send_to_slave1>:
};

void send_to_slave1(volatile char send_data)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	1f 92       	push	r1
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	89 83       	std	Y+1, r24	; 0x01
	PORTB = (0<<PORTB4); // Pulling SS2 low
  ba:	15 b8       	out	0x05, r1	; 5
	SPDR = send_data;
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	8e bd       	out	0x2e, r24	; 46
};
  c0:	0f 90       	pop	r0
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	87 ea       	ldi	r24, 0xA7	; 167
  ca:	91 e6       	ldi	r25, 0x61	; 97
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x4>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0xa>
  d2:	00 00       	nop
// todo: functions for transmit and receive

int main(void)
{
	_delay_ms(100);
	init_master();
  d4:	e4 df       	rcall	.-56     	; 0x9e <init_master>
	sei();
  d6:	78 94       	sei
	
	// 
	send_to_slave1(0xAA);
  d8:	8a ea       	ldi	r24, 0xAA	; 170
  da:	e9 df       	rcall	.-46     	; 0xae <send_to_slave1>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x14>

000000de <__vector_1>:
    }
}


ISR(INT0_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
	;
}
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_19>:

ISR(SPI_STC_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
	PORTB = (1<<PORTB4); // Pulling SS2 high
  fe:	80 e1       	ldi	r24, 0x10	; 16
 100:	85 b9       	out	0x05, r24	; 5
	DDRA = 0xFF;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	81 b9       	out	0x01, r24	; 1
	PORTA = SPDR;
 106:	8e b5       	in	r24, 0x2e	; 46
 108:	82 b9       	out	0x02, r24	; 2
}
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
